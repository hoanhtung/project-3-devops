trigger:
  - main

name: Azure Pipelines
variables:
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.7.13'
  poolName: 'myAgentPool'
  serviceConn: 'myserviceconn1234'

stages:
  # - stage: Provision
  #   displayName: Provision stage
  #   jobs:
  #     - job: TerraformProvisionJob
  #       pool: $(poolName)
  #       steps:
  #         #Terraform Init
  #         - task: TerraformTaskV2@2
  #           displayName: 'Initiation'
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'init'
  #             commandOptions: '-reconfigure'
  #             workingDirectory: $(System.DefaultWorkingDirectory)/terraform
  #             backendServiceArm: '$(serviceConn)'
  #             backendAzureRmResourceGroupName: 'Azuredevops'
  #             backendAzureRmStorageAccountName: 'tungstorage4736'
  #             backendAzureRmContainerName: 'tungcontainer'
  #             backendAzureRmKey: 'terraform.tfstate'

  #         #Terraform Apply
  #         - task: TerraformTaskV2@2
  #           displayName: 'Apply'
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'apply'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #             environmentServiceNameAzureRM: '$(serviceConn)'

  # - stage: Build
  #   displayName: Build stage
  #   jobs:
  #   - job: Build
  #     pool: $(poolName)
  #     steps:
  #     - task: ArchiveFiles@2
  #       displayName: 'Archive FakeRestAPI'
  #       inputs:
  #         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
  #     - publish: $(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip
  #       displayName: 'Upload Fakerestapi Package'
  #       artifact: drop-fakerestapi

  #     - task: ArchiveFiles@2
  #       displayName: Archive Selenium
  #       inputs:
  #         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
  #     - publish: $(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip
  #       displayName: 'Upload selenium Package'
  #       artifact: drop-selenium

  # - stage: Deployment
  #   jobs:
  #   - deployment: FakeRestAPI
  #     pool: $(poolName)
  #     environment: 'TEST'
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - task: AzureWebApp@1
  #             displayName: 'Deploy Azure Web App'
  #             inputs:
  #               azureSubscription: '$(serviceConn)'
  #               appName: 'hoanhtung-AppService'
  #               appType: webApp
  #               package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
    # - deployment: VMDeploy
    #   displayName: NAME
    #   environment:
    #     name:  ENVIRONMENT NAME
    #     resourceType: VirtualMachine
    #     tags: TAG NAME
    #   strategy:
    #     runOnce:
    #       deploy:
    #         steps:
    #         - task: Bash@3
    #           inputs:
    #             targetType: 'inline'
    #             script: |
    #               #! /bin/bash

    #               sudo apt-get upgrade -y
    #               sudo apt-get install python3-pip -y
    #               sudo apt-get install unzip -y
    #               sudo apt-get install -y chromium-browser
    #               pip3 install selenium
    #               export PATH=$PATH:some/path

  - stage: Test
    displayName: Test stage
    jobs:
    - job: PostmanTest
      pool: $(poolName)
      steps:
      # - task: NodeTool@0
      #   displayName: Install Node v12.X
      #   inputs:
      #     versionSpec: '12.x'
      - bash: |
          npm install -g newman
          npm install -g newman-reporter-junitfull
          newman run "RegressionTest.postman_collection.json" -e MyEnv.postman_environment.json --reporters cli,junitfull --reporter-junitfull-export regression-test.xml
          newman run "DataValidationTest.postman_collection.json" -e MyEnv.postman_environment.json --reporters cli,junitfull --reporter-junitfull-export validation-test.xml
        workingDirectory: $(projectRoot)/automatedtesting/postman/
        displayName: "Run Postman"
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(projectRoot)/automatedtesting/postman/validation-test.xml'
        displayName: 'Publish Data Validation Tests Result'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(projectRoot)/automatedtesting/postman/regression-test.xml'
        displayName: 'Publish Regression Tests Result'
